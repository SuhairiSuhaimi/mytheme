{#
/**
 * @file
 * Theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Infographic" it would result in "node--type-infographic". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 */
#}
{%
set node_classes = [
  'node',
  'infographic',
  'node-type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node-promoted',
  node.isSticky() ? 'node-sticky',
  not node.isPublished() ? 'node-unpublished',
  view_mode ? 'node-view-mode-' ~ view_mode|clean_class,
]
%}

<content{{ attributes.addClass(node_classes) }}>
  <div class="content-title pb-4">
    {# content-type #}
    <div class="content-type no-print text-sm text-normal">Infografik</div>

    {# page-title #}
    <div class="title text-xlg text-bolder pt-4">{{ node.label }}</div>
  </div>

  <div class="content-header">
    {# infographic image #}
    {% if node.field_image_infographic is not empty %}
      <div class="grid">
        {% for image in node.field_image_infographic %}
          {# n starts at 1, incrementing by 1 with each iteration #}
          {% set n = loop.index %}
          <div class="infographic-image text-center w-100 p-0">
            <img class="img-infographic" src="{{ image|file_url }}" style="min-width: 100%; height: auto;">
            {% if image.title %}
              <div class="image-title text-sm text-italic">
                {{ n }}). {{ image.title }}
              </div>
            {% else %}
              <div class="image-title text-sm">
                {{ n }}). no title
              </div>
            {% endif %}
          </div>

        {% endfor %}
      </div>
    {% endif %}

    {% if taxonomy_data is not empty %}
      <div class="node-tag mb-3 py-1">
        <div class="display d-inline">Tags:</div>
        <ul class="d-inline list-unstyled">
          {% set n = 0 %}
          {% for term in taxonomy_data %}
            {% if n > 0 %}
            {% endif %}
            <li class="list-inline-item">
              <a href="{{ term.url }}">{{ term.name }}</a> {# ( {{ term.id }} ) #}
            </li>
            {% set n = n + 1 %}
          {% endfor %}
        </ul>
      </div>
    {% endif %}
  </div>

  {%
    set contentbody = {
      '#type': 'processed_text',
      '#text':  node.body.value,
      '#format': node.body.format,
    }
  %}
  {% set body_text = node.body.value %}
  {% set max_length = 1000 %}
  {% set max = (body_text|length / max_length)|round %}
  {% set style = max > 1 ? 'style="height: 500px;"' %}
  <div class="content-body">
    <div class="display pt-3">
      {{ content.body }}
    </div>
  </div> {# infographic-body #}
</content>
